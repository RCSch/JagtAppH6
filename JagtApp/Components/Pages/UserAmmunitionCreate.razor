@page "/userammunition/create"
@using JagtApp.Models
@using JagtApp.Services
@inject CartridgeService CartridgeService
@inject UserAmmunitionService UserAmmunitionService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Tilføj ny ammunition</h3>

<EditForm Model="@userAmmunition" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="cartridge">Patron</label>
        <InputSelect id="cartridge" @bind-Value="userAmmunition.CartridgeId" class="form-control">
            <option value="">Vælg patron</option>
            @foreach (var cartridge in cartridges)
            {
                <option value="@cartridge.Id">@cartridge.CartridgeName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="quantity">Mængde</label>
        <InputNumber id="quantity" @bind-Value="userAmmunition.Quantity" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Opret</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Annuller</button>
</EditForm>

@code {
    private UserAmmunition userAmmunition = new UserAmmunition();
    private List<Cartridge> cartridges = new List<Cartridge>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing component...");
        cartridges = await CartridgeService.GetCartridges();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine("User is authenticated.");
            userAmmunition.OwnerId = user.FindFirst("sub")?.Value;
            Console.WriteLine($"Owner ID set to: {userAmmunition.OwnerId}");
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called...");
        Console.WriteLine($"Creating ammunition with Quantity: {userAmmunition.Quantity}, CartridgeId: {userAmmunition.CartridgeId}, OwnerId: {userAmmunition.OwnerId}");

        await UserAmmunitionService.CreateUserAmmunition(userAmmunition);
        NavigationManager.NavigateTo("/userammunition");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/userammunition");
    }
}
